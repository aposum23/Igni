import tensorflow as tf
import numpy as np
from trainfunc import *

W = np.array([1.1642189, 1.1255227, 1.1460644, 1.1157391, 1.1364431, 1.1187533,
       1.0920436, 1.1360883, 1.1376011, 1.1553767, 1.1493285, 1.1161456,
       1.1745383, 1.0793054, 1.1426021, 1.1311239, 1.1749763, 1.1645788,
       1.1433076, 1.1393168, 1.1061834, 1.1018494, 1.1224986, 1.0770329,
       1.1283634, 1.1633992, 1.1262754, 1.1228964, 1.1254358, 1.1470643,
       1.1566408, 1.111297 , 1.1102608, 1.1132718, 1.1144091, 1.1412759,
       1.1443824, 1.1373497, 1.1485082, 1.1395369, 1.1469237, 1.1446776,
       1.1471153, 1.127178 , 1.12924  , 1.1459396, 1.1830708, 1.1292135,
       1.1167591, 1.14698  , 1.1414937, 1.1460793, 1.1204613, 1.153245 ,
       1.1359123, 1.1583787, 1.1310169, 1.1128749, 1.1725186, 1.1332847,
       1.1433306, 1.1313193, 1.1132878, 1.1269383, 1.1311464, 1.1647055,
       1.1435484, 1.1580355, 1.1269677, 1.1149873, 1.1213759, 1.0833502,
       1.0975999, 1.1810546, 1.1123089, 1.1465873, 1.1244882, 1.136589 ,
       1.1327034, 1.1131011, 1.1480594, 1.1185462, 1.1762244, 1.0939299,
       1.1672261, 1.1437697, 1.1434778, 1.149268 , 1.1552396, 1.1188604,
       1.1181808, 1.082898 , 1.12532  , 1.192436 , 1.120964 , 1.1113647,
       1.1100515, 1.1594049, 1.1697768, 1.1118131, 1.1791533, 1.1780535,
       1.1293887, 1.1115319, 1.1187356, 1.1199446, 1.1345845, 1.1077234,
       1.1461601, 1.0809529, 1.1470135, 1.1031007, 1.16952  , 1.1176151,
       1.1452953, 1.1707088, 1.1517507, 1.1042553, 1.1582166, 1.1277373,
       1.149642 , 1.0962818, 1.1417624, 1.135633 , 1.1706425, 1.109874 ,
       1.1212492, 1.1357656, 1.113053 , 1.1453907, 1.1039643, 1.1153526,
       1.1014016, 1.1272103, 1.1509193, 1.1453753, 1.1584436, 1.1249049,
       1.1290902, 1.1144037, 1.1086993, 1.1391648, 1.1588484, 1.1199834,
       1.1731781, 1.125474 , 1.1302447, 1.1343927, 1.1387676, 1.1600525,
       1.1129462, 1.1520075, 1.1330632, 1.1712403, 1.1294137, 1.1434622,
       1.1357056, 1.0952679, 1.1337578, 1.1422383, 1.1616272, 1.1763945,
       1.1198012, 1.1316954, 1.1834501, 1.1247073, 1.1219373, 1.1287271,
       1.1474543, 1.154892 , 1.1341805, 1.1363006, 1.1701814, 1.1720456,
       1.1460954, 1.1383303, 1.1136628, 1.1256169, 1.1723801, 1.1182756,
       1.1249403, 1.0929785, 1.1505967, 1.1206788, 1.1455665, 1.108557 ,
       1.1530942, 1.1814597, 1.1225822, 1.1401149, 1.1042255, 1.1348845,
       1.1297215, 1.1120274, 1.1627235, 1.148799 , 1.1522892, 1.1616522,
       1.1160872, 1.14421])

B = np.array([[1.0642452 , 1.0648462 , 1.030275  , ..., 1.1072556 , 0.96695936,
        0.85410863],
       [0.9463064 , 0.91078377, 1.0625579 , ..., 0.9685249 , 1.0360848 ,
        0.877003  ],
       [1.1271286 , 1.1360636 , 0.93749475, ..., 1.0597038 , 0.97244155,
        1.0304914 ],
       ...,
       [1.0023199 , 0.95548373, 1.0061405 , ..., 1.0743161 , 1.0166833 ,
        1.1180315 ],
       [0.8161791 , 0.9847033 , 1.1130413 , ..., 1.1777035 , 1.0451674 ,
        0.99316615],
       [1.0947889 , 1.0037577 , 0.9800422 , ..., 1.1500155 , 0.93466926,
        1.1507186 ]])


def CalculateSqr(poligon):

    global W
    global B

    class FindSqr(tf.Module):
        def __init__(self, outputs):
            super().__init__()
            self.outputs = outputs
            self.fl_init = False

        def __call__(self, x):
            if not self.fl_init:
                self.w = tf.Variable(W, dtype=tf.float32, shape=(200,))
                self.b = tf.Variable(B, dtype=tf.float32, shape=(202, 200))

                self.w = tf.Variable(self.w)
                self.b = tf.Variable(self.b)

                self.fl_init = True

            y = x @ self.w + self.b
            return y

    model = FindSqr(200)

    Sqr_pol = model(tf.constant([getPoligon(poligon)]))
    print(Sqr_pol)
    return Sqr_pol


def getPoligon(poligon):
    new_pol = 'POLYGON ((' + poligon + '))'
    coords = add_cord(new_pol)
    return(np.array(coords))
